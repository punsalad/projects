#!/usr/bin/perl
#
# bookpicker -- pick a book from the top of one or more "book stacks" at (weighted) random
#

use strict;
use warnings;
use Const::Fast;
use Data::Dumper;
use English qw( -no_match_vars );
use Getopt::Std;
use Time::Piece;
use Time::Seconds;
use open qw(:std :utf8);
use version; our $VERSION = qv('v2022.04.15');

my %opts;

getopts( 'v', \%opts ) || die "Usage: $PROGRAM_NAME [-v]\n";
my $verbose = ( $opts{v} );
$verbose && print "Verbosity on!\n";

my $now       = localtime;
my $stackfile = "$ENV{'HOME'}/var/bookstacks.pl";

#
# read stack data...
#
our @STACKS;
if ( !( my $return = do $stackfile ) ) {
    die "Couldn't parse $stackfile $EVAL_ERROR\n" if $EVAL_ERROR;
    die "Couldn't do    $stackfile $ERRNO\n"      if !defined $return;
    die "Couldn't run   $stackfile\n"             if !$return;
}

#
# filter eligible stacks
#     - not "recently" picked
#     - non-empty
#     - top book on stack is owned
#
my @eligible_stacks;
my $tot_weight = 0;
my $i          = 0;
for my $stack (@STACKS) {
    my $lastpicked_lt
        = $stack->{lastpicked}
        ? Time::Piece->strptime( $stack->{lastpicked}, '%Y-%m-%d' )
        : localtime 0;
    my $stack_age = $now - $lastpicked_lt;
    my $nbooks    = scalar @{ $stack->{books} };
    my $eligible
        = $stack_age->days >= $stack->{minage}
        && $nbooks > 0
        && $stack->{books}->[0]{owned};
    if ($eligible) {
        #
        # very arbitrary weight: (number of books in stack) * (age in days)
        #
        my $wt = int( $nbooks * $stack_age->days );
        push @eligible_stacks,
            {
            index  => $i,
            weight => $wt,
            };
        $tot_weight += $wt;
    }
    $i++;

}
( $tot_weight > 0 ) || die "Eek: NO eligible stacks!\n";
my $r = int rand $tot_weight;

#
# in verbose mode, output eligible stacks and their probabilities
#
const my $CENTUM => 100;
if ($verbose) {
    print "Eligible stacks and their probabilities:\n";
    for my $e (@eligible_stacks) {
        printf "%4.1f%% %s\n", $CENTUM * $e->{weight} / $tot_weight,
            $STACKS[ $e->{index} ]->{name};
    }
    printf "r = %d; normalized = %4.1f%%\n", $r, $CENTUM * $r / $tot_weight;
}

#
# choose a weighted random eligible stack
#
my $p = 0;
while ( $r >= $eligible_stacks[$p]{weight} ) {
    $r -= $eligible_stacks[$p]{weight};
    $p++;
}
my $ii = $eligible_stacks[$p]{index};

my $picked_book = shift @{ $STACKS[$ii]->{books} };
printf "Picked book is '%s' by %s from '%s' stack (%s)\n",
    $picked_book->{title}, $picked_book->{'author'},
    $STACKS[$ii]->{name}, $picked_book->{'ASIN'};

#
# update lastpicked date for stack...
#
$STACKS[$ii]->{lastpicked} = $now->ymd;

#
# rename old stack datafile as .old
#
rename $stackfile, $stackfile . '.old'
    or die "Renaming $stackfile failed: $ERRNO\n";

#
# write the updated stack data with Data::Dumper;
#
$Data::Dumper::Sortkeys = sub {
    my %order = (
        'name'       => 1,
        'minage'     => 2,
        'lastpicked' => 3,
        'books'      => 4,
        'title'      => 5,
        'author'     => 6,
        'ASIN'       => 7,
        'owned'      => 8,
    );
    return [ sort { $order{$a} <=> $order{$b} } keys %{ $_[0] } ];
};

open my $SF, '>', $stackfile
    or die "Opening $stackfile for output failed: $ERRNO\n";
print {$SF} Data::Dumper->Dump( [ \@STACKS ], [qw /*STACKS/] );
close $SF or warn "Closing $stackfile failed: $ERRNO\n";
