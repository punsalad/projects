#!/usr/bin/perl
#
# produce HTML list for efficient shopping
#

use strict;
use warnings;
use Const::Fast;
use Cwd 'abs_path';
use Data::Dumper;
use English qw( -no_match_vars );
use Getopt::Std;
use HTML::Template;
use open qw(:std :encoding(UTF-8));
use version; our $VERSION = qv('v2021.07.12');

const my $HTML_TEMPLATE_FILE => $ENV{'HOME'} . '/Templates/Listmaker.tmpl';
const my $USAGE => "Usage: $PROGRAM_NAME [-s store configuration file] list";
const my $DEFAULT_CF_FILE => $ENV{'HOME'} . '/etc/listmaker.cf';

#
# handle command-line arguments...
#
my %opts;
getopts( 's:', \%opts ) or die "$USAGE\n";
my $list_cf_file = ( defined $opts{'s'} ) ? $opts{'s'} : $DEFAULT_CF_FILE;
( -r $list_cf_file ) or die "$USAGE\n";

my $listfile = shift or die "$USAGE\n";
( -r $listfile )     or die "$USAGE\n";
my $abs_path = abs_path($listfile);

#
# read specified store config file...
#
our ( %ORDER, %HMAP );
if ( !( my $return = do $list_cf_file ) ) {
    die "Couldn't parse $list_cf_file $EVAL_ERROR\n" if $EVAL_ERROR;
    die "Couldn't do    $list_cf_file $ERRNO\n"      if !defined $return;
    die "Couldn't run   $list_cf_file\n"             if !$return;
}

#
# sanity checks: ORDER hash should have unique unsigned integer values...
#
my %order_seen;
for my $loc ( keys %ORDER ) {
    if ( $ORDER{$loc} !~ /^ \d+ $/x ) {
        warn
            "$list_cf_file: ORDER hash key $loc has invalid value '$ORDER{$loc}'\n";
    }
    elsif ( $order_seen{ $ORDER{$loc} }++ ) {
        warn "$list_cf_file: duplicate value in ORDER hash $ORDER{$loc}\n";
    }
}

#
# and all items' locations should appear in ORDER hash
#
for my $item ( keys %HMAP ) {
    ( exists $ORDER{ $HMAP{$item} } )
        or warn
        "$list_cf_file: item $item has unknown location $HMAP{$item}\n";
}

#
# read input list...
#
open my $LF, '<', $listfile or die "Failed to open $listfile: $ERRNO\n";
chomp( my @listlines = <$LF> );
close $LF or warn "Closting $listfile failed: $ERRNO\n";

#
# process input list, asking for locations as needed...
#
my $map_changes = 0;
my @list        = ();
for (@listlines) {

    #
    # ignore comments
    #
    if (/^#/) {
        next;
    }

    #
    # parse list line with regex (sorry)
    #
    my ( $qty, $desc, $notes )
        = (
        /^ (?:(\d+)? \s+)? ([^\N{VERTICAL LINE}]+) (?:\s* \N{VERTICAL LINE} \s* (.+))? $/gx
        );
    defined $desc or next;
    $desc =~ s/\s+$//;
    defined $qty or ( $qty = 1 );
    if ( defined $notes ) {
        $notes =~ s/\s+$//;
    }
    else {
        $notes = q{};
    }

    #
    # if list item not currently in store map, ask and save for next time
    #
    while ( !exists $HMAP{ lc $desc } ) {
        print "Please tell me the aisle/location of item '$desc': ";
        chomp( my $aisle = <> );
        if ( exists $ORDER{$aisle} ) {
            $HMAP{ lc $desc } = $aisle;
            $map_changes++;
        }
        else {
            print
                "   Sorry, $aisle not present in $list_cf_file. Try again...\n";
        }
    }
    push @list,
        {
        Qty   => $qty,
        Desc  => $desc,
        Loc   => $HMAP{ lc $desc },
        Notes => $notes,
        };
}

#
# sort list into aisle order...
#
@list = sort { $ORDER{ $a->{'Loc'} } <=> $ORDER{ $b->{Loc} } } @list;

#
# construct output HTML list
#
my @listloop = ();
my $prevloc  = q{};
for my $item (@list) {
    push @listloop,
        {
        item   => $item->{Desc},
        qty    => ( $item->{Qty} > 1 ) ? $item->{Qty} : '&nbsp;',
        notes  => $item->{Notes},
        loc    => $item->{Loc},
        newloc => ( $item->{Loc} ne $prevloc ),
        };
    $prevloc = $item->{Loc};
}

my $template = HTML::Template->new( filename => $HTML_TEMPLATE_FILE, );
$template->param( 'items' => \@listloop );

my $outfile = $abs_path . '.html';
open my $HTML, '>', $outfile
    or die "Opening $outfile failed: $ERRNO\n";
print {$HTML} $template->output;
close $HTML or warn "Closing $outfile failed: $ERRNO\n";
print "[HTML list saved at file://$outfile]\n";

#
# update store config file if map changed
#
if ($map_changes) {
    rename $list_cf_file, $list_cf_file . '.old'
        or die "Renaming $list_cf_file failed: $ERRNO\n";
    open my $CF, '>', $list_cf_file
        or die "Opening $list_cf_file for output failed: $ERRNO\n";
    {
        local $Data::Dumper::Trailingcomma = 1;
        print {$CF}
            Data::Dumper->Dump( [ \%ORDER, \%HMAP ], [qw/*ORDER *HMAP/] );
    }
    close $CF or warn "Closing $list_cf_file failed: $ERRNO\n";
}
